<h2>Basic Auth</h2>

<div class="row">
  <div class="input-group">
    <label for="username" class="col-sm-2 col-form-label">Username</label>
    <div class="col-sm-10">
      <input type="text" class="form-control-plaintext" id="username" @bind="@username" @oninput="OnUsernameEntered" placeholder="Username here">
    </div>
  </div>
  <div class="input-group">
    <label for="password" class="col-sm-2 col-form-label">Password</label>
    <div class="col-sm-10">
      <input type="password" class="form-control-plaintext" id="password" @bind="@password" @oninput="OnPasswordEntered" placeholder="Password here">
    </div>
  </div>
  <div class="input-group">
    <button class="btn btn-primary" @onclick="OnBasicAuthSubmitted">Submit</button>
    <input type="text" class="form-control" readonly value="@endpoint">
  </div>
  <div class="input-group" style="height: 300px;">
    <span class="input-group-text">Result</span>
    <textarea readonly class="form-control mh-100 @backgroundColor" aria-label="Result">@result</textarea>
  </div>
</div>

@code {
    private string? username = default;
    private string? password = default;
    private string? backgroundColor = "text-black bg-light";
    private string? endpoint = default;
    private string? result = default;

    [Parameter]
    public HttpClient? Http { get; set; } = default;

    [Parameter]
    public AppSettings? Settings { get; set; } = default;

    protected void OnUsernameEntered(ChangeEventArgs ev)
    {
        this.username = ev.Value as string;
    }

    protected void OnPasswordEntered(ChangeEventArgs ev)
    {
        this.password = ev.Value as string;
    }

    protected async Task OnBasicAuthSubmitted()
    {
        if (this.Http is null)
        {
            result = "Http is null";
            backgroundColor = "text-white bg-danger";
            return;
        }

        if (this.Settings is null)
        {
            result = "Settings is null";
            backgroundColor = "text-white bg-danger";
            return;
        }

        if (string.IsNullOrWhiteSpace(this.username))
        {
            result = "Please enter your username";
            backgroundColor = "text-white bg-danger";
            return;
        }

        if (string.IsNullOrWhiteSpace(this.password))
        {
            result = "Please enter your password";
            backgroundColor = "text-white bg-danger";
            return;
        }

        var basicauth = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{this.username.Trim()}:{this.password.Trim()}"));

        this.Http.DefaultRequestHeaders.Clear();
        this.Http.DefaultRequestHeaders.Add("Authorization", $"Basic {basicauth}");

        var url = this.Settings.BasicAuth.Endpoint.TrimEnd('/');
        endpoint = url;

        var response = await this.Http.GetFromJsonAsync<object>(url);
        result = JsonSerializer.Serialize(response, new JsonSerializerOptions { WriteIndented = true });
        backgroundColor = "text-white bg-success";
    }
}
